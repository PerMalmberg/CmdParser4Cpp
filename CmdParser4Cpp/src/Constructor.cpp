// Copyright (c) 2016 Per Malmberg
// Licensed under MIT, see LICENSE file. 

#include "Constructor.h"
#include "Argument.h"
#include "CmdParser4Cpp.h"
#include "StringType.h"
#include "BoolType.h"
#include "SingleBoolType.h"

namespace com {
namespace codezeal {
namespace commandline {

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Constructor::Constructor( Argument& argument, CmdParser4Cpp& parser )
	: myParser(parser),
	myArgument(argument)
{
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Constructor::~Constructor()
{
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor& 
Constructor::AsString( int parameterCount ) const
{
	return AsString( parameterCount, parameterCount );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::AsString( int minimumParameterCount, int maximumParameterCount ) const
{
	myArgument.SetArgumentType( new StringType( myParser, myArgument, minimumParameterCount, maximumParameterCount ) );
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::AsBoolean( int parameterCount ) const
{
	return AsBoolean( parameterCount, parameterCount );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::AsBoolean( int minimumParameterCount, int maximumParameterCount ) const
{
	myArgument.SetArgumentType( new BoolType( myParser, myArgument, minimumParameterCount, maximumParameterCount ) );
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::AsSingleBoolean() const
{
	myArgument.SetArgumentType( new SingleBoolType( myParser, myArgument ) );
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::WithAlias( const std::string& alias ) const
{
	myArgument.AddAlias( alias );
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::SetMandatory() const
{
	myArgument.SetMandatory();
	return *this;
}

} // END commandline
} // END codezeal
} // com