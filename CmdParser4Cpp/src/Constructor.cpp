// Copyright (c) 2016 Per Malmberg
// Licensed under MIT, see LICENSE file.
// Give credit where credit is due.

#include <limits>
#include "CmdParser4Cpp/Constructor.h"
#include "Argument.h"
#include "StringType.h"
#include "BoolType.h"
#include "SingleBoolType.h"
#include "IntegerType.h"

namespace cmdparser4cpp {

const int Constructor::NO_PARAMETER_LIMIT = std::numeric_limits<int>::max();

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Constructor::Constructor( Argument& argument, CmdParser4Cpp& parser )
	: myParser(parser),
	myArgument(argument)
{
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Constructor::~Constructor()
{
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::WithAlias( const std::string& alias ) const
{
	myArgument.AddAlias( alias );
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::WithAlias( const VectorOfString& alias ) const
{
	for( const auto& a : alias ) {
		myArgument.AddAlias( a );
	}
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::SetMandatory() const
{
	myArgument.SetMandatory();
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::DescribedAs( const std::string& desc ) const
{
	myArgument.SetDescription( desc );
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::DependsOn( const std::string& primaryName ) const
{
	myArgument.AddDependency( primaryName );
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::BlockedBy( const std::string& primaryName ) const
{
	myArgument.AddBlockedBy( primaryName );
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor&
Constructor::SetHidden() const
{
	myArgument.SetHidden();
	return *this;
}


} // END cmdparser4cpp