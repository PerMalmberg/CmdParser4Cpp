// Copyright (c) 2016 Per Malmberg
// Licensed under MIT, see LICENSE file. 

#include "TypeConstructor.h"
#include "Argument.h"
#include "StringType.h"
#include "BoolType.h"
#include "SingleBoolType.h"
#include "IntegerType.h"

namespace cmdparser4cpp {

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
TypeConstructor::TypeConstructor( Argument& argument, CmdParser4Cpp& parser )
		: myParser( parser ),
		  myArgument( argument )
{
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
TypeConstructor::~TypeConstructor()
{
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor
TypeConstructor::AsString( int parameterCount ) const
{
	return AsString( parameterCount, parameterCount );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor
TypeConstructor::AsString( int minimumParameterCount, int maximumParameterCount ) const
{
	myArgument.SetArgumentType( new StringType( myParser, myArgument, minimumParameterCount, maximumParameterCount ) );
	return Constructor( myArgument, myParser );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor
TypeConstructor::AsBoolean( int parameterCount ) const
{
	return AsBoolean( parameterCount, parameterCount );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor
TypeConstructor::AsBoolean( int minimumParameterCount, int maximumParameterCount ) const
{
	myArgument.SetArgumentType( new BoolType( myParser, myArgument, minimumParameterCount, maximumParameterCount ) );
	return Constructor( myArgument, myParser );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor
TypeConstructor::AsSingleBoolean() const
{
	myArgument.SetArgumentType( new SingleBoolType( myParser, myArgument ) );
	return Constructor( myArgument, myParser );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor
TypeConstructor::AsInteger( int parameterCount ) const
{
	return AsInteger( parameterCount, parameterCount );
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
const Constructor
TypeConstructor::AsInteger( int minimumParameterCount, int maximumParameterCount ) const
{
	myArgument.SetArgumentType( new IntegerType( myParser, myArgument, minimumParameterCount, maximumParameterCount ) );
	return Constructor( myArgument, myParser );
}


} // END cmdparser4cpp